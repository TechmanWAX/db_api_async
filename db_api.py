from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

'''
pool_pre_ping=True в SQLAlchemy указывает на то, что соединение в пуле будет 
автоматически проверено на его работоспособность (ping) перед использованием. 
Это означает, что перед тем, как какое-либо соединение будет возвращено из пула 
для выполнения каких-либо операций в базе данных, будет выполнена проверка на то, 
что соединение все еще активно и работоспособно.

Если соединение не проходит эту проверку 
(например, если база данных недоступна или соединение было разорвано), 
оно будет удалено из пула, а затем создано новое, 
которое будет использовано вместо недоступного соединения.
'''

async_engine = create_async_engine('sqlite+aiosqlite:///myfarm.sqlite', echo=True)

'''
autoflush: Этот параметр управляет автоматическим сбросом (flush) изменений в базу данных перед выполнением запросов. 
Когда autoflush установлен в True, SQLAlchemy автоматически сбрасывает все неприменённые изменения 
в базу данных перед выполнением запросов к базе данных. 
Это может быть полезно, когда вы хотите убедиться, что все изменения сохранены в базе данных 
перед выполнением каких-либо операций чтения или передачи данных. 
Однако в некоторых случаях отключение autoflush может быть предпочтительным для улучшения производительности, 
особенно если вы выполняете много операций записи, и вам не нужно обязательно сразу видеть эти изменения в базе данных.

future: Этот параметр указывает, что возвращаемые объекты запросов будут объектами "фьючеров" (future). 
Фьючеры представляют собой специальные объекты, которые позволяют отложить выполнение запроса до момента, 
когда данные из результата запроса действительно потребуются. 
Это может помочь оптимизировать производительность вашего приложения, 
поскольку запросы будут выполняться только в тот момент, когда данные будут действительно необходимы 
для дальнейшей обработки. Это особенно полезно при выполнении запросов, которые могут быть дорогостоящими 
в вычислительном плане, и вы не хотите, чтобы они выполнялись сразу после создания запроса.
'''

AsyncSessionLocal = sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)

class Session:
    def __init__(self):
        self.session = AsyncSessionLocal()

    async def __aenter__(self):
        return self.session

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        try:
            await self.session.commit()
        except Exception as e:
            await self.session.rollback()
            raise e
        finally:
            await self.session.close()
